// Code generated by "go-enum-codegen -type MySignedEnum"; DO NOT EDIT.

package myenum

import (
	"database/sql/driver"
	"fmt"
	"strconv"
)

// Scan implements sql.Scanner for MySignedEnum
func (m *MySignedEnum) Scan(value interface{}) error {
	i, ok := value.(int)
	if !ok {
		return fmt.Errorf("failed to scan MySignedEnum value: expected type `int`, got `%T`", value)
	}
	switch i {
	case 1, 2, 3:
		*m = MySignedEnum(i)
	default:
		*m = MySignedEnumZero
	}

	return nil
}

// Value implements driver.Valuer for MySignedEnum
func (m MySignedEnum) Value() (driver.Value, error) {
	return int(m), nil
}

// UnmarshalJSON implements json.Unmarshaler for MySignedEnum
func (m *MySignedEnum) UnmarshalJSON(data []byte) error {
	str := string(data)
	v, err := strconv.ParseInt(str, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to unmarshal MySignedEnum value: could not convert `[]byte` to `int`: %v", err)
	}
	i := int(v)
	switch i {
	case 1, 2, 3:
		*m = MySignedEnum(i)
	default:
		*m = MySignedEnumZero
	}

	return nil
}

// MarshalJSON implements json.Marshaler for MySignedEnum
func (m MySignedEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%d", int(m))), nil
}
